/**
 * Shell Data & Reporting APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Accounts, accountsSchema } from './accounts';
import {
  FuelConsumptionCard,
  fuelConsumptionCardSchema,
} from './fuelConsumptionCard';

export interface FuelConsumptionRequest {
  /**
   * Collecting Company Id  of the selected payer.
   * Optional if ColCoCode is passed else Mandatory.
   * Example:
   * 1 for Philippines
   * 5 for UK
   */
  colCoId?: number;
  /**
   * Collecting Company Code  of the selected payer.
   * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is provided.
   * Example:
   * 86 for Philippines
   * 5 for UK
   */
  colCoCode?: number;
  /**
   * Payer Id  of the selected payer.
   * Optional if PayerNumber is passed else Mandatory
   */
  payerId?: number;
  /**
   * Payer Number of the selected payer.
   * Optional if PayerId is passed else Mandatory
   */
  payerNumber?: string;
  accounts?: Accounts[];
  /**
   * Card Group Id in GFN
   * Optional
   * Example: 200
   */
  cardGroupId?: number;
  /**
   * Card Group Name
   * Optional
   * This input is a search criterion, if given.
   */
  cardGroupName?: string;
  cards?: FuelConsumptionCard[];
  /**
   * Transactions from Date
   * Optional – ‘Period’ will be considered when this field is not provided.
   */
  fromDate?: string;
  /**
   * Transactions to Date
   * Optional
   * Format: yyyyMMdd
   */
  toDate?: string;
  /**
   * Transactions Period. This is ignored when FromDate is supplied on the request
   * Allowed values :
   * 1.	Last 7 Days
   * 2.	Last 30 Days
   * 3.	Last 90 Days
   * Optional - When FromDate/ToDate and Period are not provided, ‘Last 7 Days’ value is considered as default Period.
   */
  period?: number;
}

export const fuelConsumptionRequestSchema: Schema<FuelConsumptionRequest> = object(
  {
    colCoId: ['ColCoId', optional(number())],
    colCoCode: ['ColCoCode', optional(number())],
    payerId: ['PayerId', optional(number())],
    payerNumber: ['PayerNumber', optional(string())],
    accounts: ['Accounts', optional(array(lazy(() => accountsSchema)))],
    cardGroupId: ['CardGroupId', optional(number())],
    cardGroupName: ['CardGroupName', optional(string())],
    cards: ['Cards', optional(array(lazy(() => fuelConsumptionCardSchema)))],
    fromDate: ['FromDate', optional(string())],
    toDate: ['ToDate', optional(string())],
    period: ['Period', optional(number())],
  }
);
