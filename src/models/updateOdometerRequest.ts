/**
 * Shell Data & Reporting APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { UpdateOdometer, updateOdometerSchema } from './updateOdometer';

export interface UpdateOdometerRequest {
  /**
   * Collecting Company Id  of the selected payer.
   * Optional if ColCoCode is passed else Mandatory.
   * Example:
   * 1 for Philippines
   * 5 for UK
   */
  colCoId?: number;
  /**
   * Collecting Company Code (Shell Code) of the selected payer.
   * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is provided.
   */
  colCoCode?: number;
  /**
   * Payer Id (i.e. Customer Id of the Payment Customer in Cards Platform) of the selected payer.
   * Optional if PayerNumber is passed else Mandatory
   */
  payerId?: number;
  /**
   * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
   * Optional if AccountNumber is passed else Mandatory
   */
  accountId?: number;
  /**
   * Account Number (ex: GB000000123) of the selected account.
   * Optional if AccountId is passed else Mandatory
   */
  accountNumber?: string;
  updateOdometers?: UpdateOdometer[];
  /**
   * True/False.
   * Optional.
   * Default: False
   * If true, the caller would be notified back with the status as success or failure after the update odometer is processed.
   */
  notifyCaller?: boolean;
  /**
   * The caller to be notified with the status of the update odometer.
   * Mandatory, if NotifyCaller is true.
   */
  caller?: string;
}

export const updateOdometerRequestSchema: Schema<UpdateOdometerRequest> = object(
  {
    colCoId: ['ColCoId', optional(number())],
    colCoCode: ['ColCoCode', optional(number())],
    payerId: ['PayerId', optional(number())],
    accountId: ['AccountId', optional(number())],
    accountNumber: ['AccountNumber', optional(string())],
    updateOdometers: [
      'UpdateOdometers',
      optional(array(lazy(() => updateOdometerSchema))),
    ],
    notifyCaller: ['NotifyCaller', optional(boolean())],
    caller: ['Caller', optional(string())],
  }
);
