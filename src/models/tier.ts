/**
 * Shell Data & Reporting APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { nullable, number, object, optional, Schema, string } from '../schema';

export interface Tier {
  /**
   * The price list if reference price is list price.
   * Only used when the Price Rule category is set to.
   * ‘Tiered Pricing’.
   */
  tierPriceListId?: number | null;
  /** Price list description of the tier. */
  priceListDescription?: string | null;
  /**
   * Minimum tier volume
   * E.g., 500
   */
  tierMin?: number | null;
  /**
   * Maximum tier volume
   * E.g., 1000
   */
  tierMax?: number | null;
  /** Pricing group name of tier */
  tieredPricingGroupName?: string | null;
  /**
   * Tiered pricing group period.
   * Possible Values
   * 1.	Monthly
   * 2.	Quarterly
   * 3.	Semi Annually
   * 4.	Annual
   */
  tieredPricingGroupPeriod?: string | null;
  /** Discount value to be applied to the List price or pump price. */
  discountValue?: number | null;
  /**
   * Price per unit after discount
   * Note: This field will not contain any value for discounts on retail prices.
   */
  pricePerUnit?: number | null;
  /**
   * Price per unit (List Price)
   * Note: This field will not contain any value for discounts on retail prices.
   */
  pricePerUnitAfterDiscount?: number | null;
}

export const tierSchema: Schema<Tier> = object({
  tierPriceListId: ['TierPriceListId', optional(nullable(number()))],
  priceListDescription: ['PriceListDescription', optional(nullable(string()))],
  tierMin: ['TierMin', optional(nullable(number()))],
  tierMax: ['TierMax', optional(nullable(number()))],
  tieredPricingGroupName: [
    'TieredPricingGroupName',
    optional(nullable(string())),
  ],
  tieredPricingGroupPeriod: [
    'TieredPricingGroupPeriod',
    optional(nullable(string())),
  ],
  discountValue: ['DiscountValue', optional(nullable(number()))],
  pricePerUnit: ['PricePerUnit', optional(nullable(number()))],
  pricePerUnitAfterDiscount: [
    'PricePerUnitAfterDiscount',
    optional(nullable(number())),
  ],
});
